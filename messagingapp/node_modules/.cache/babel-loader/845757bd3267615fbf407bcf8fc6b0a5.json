{"ast":null,"code":"var _jsxFileName = \"/Users/nedmcculloch/Desktop/JSapps/messageapp/messagingapp/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage(\"conversations\", []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  const formattedConversations = conversations.map(conversation => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    return { ...conversation,\n      recipients\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"ADtPWNMnGiyYAnxDUYXjSDYb8Ow=\", false, function () {\n  return [useLocalStorage, useContacts];\n});\n\n_c = ConversationsProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/Users/nedmcculloch/Desktop/JSapps/messageapp/messagingapp/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useLocalStorage","useContacts","ConversationsContext","createContext","useConversations","ConversationsProvider","children","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","createConversation","recipients","prevConversations","messages","formattedConversations","map","conversation","recipient","contact","find","id","name","value"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,oBAA5B;;AAEA,MAAMC,oBAAoB,gBAAGL,KAAK,CAACM,aAAN,EAA7B;AAEA,OAAO,SAASC,gBAAT,GAA4B;AAAA;;AACjC,SAAON,UAAU,CAACI,oBAAD,CAAjB;AACD;;GAFeE,gB;;AAIhB,OAAO,SAASC,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAA6C;AAAA;;AAClD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCR,eAAe,CACvD,eADuD,EAEvD,EAFuD,CAAzD;AAIA,QAAM,CAACS,yBAAD,EAA4BC,4BAA5B,IAA4DX,QAAQ,CAAC,CAAD,CAA1E;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAeV,WAAW,EAAhC;;AAEA,WAASW,kBAAT,CAA4BC,UAA5B,EAAwC;AACtCL,IAAAA,gBAAgB,CAAEM,iBAAD,IAAuB;AACtC,aAAO,CAAC,GAAGA,iBAAJ,EAAuB;AAAED,QAAAA,UAAF;AAAcE,QAAAA,QAAQ,EAAE;AAAxB,OAAvB,CAAP;AACD,KAFe,CAAhB;AAGD;;AAED,QAAMC,sBAAsB,GAAGT,aAAa,CAACU,GAAd,CAAmBC,YAAD,IAAkB;AACjE,UAAML,UAAU,GAAGK,YAAY,CAACL,UAAb,CAAwBI,GAAxB,CAA6BE,SAAD,IAAe;AAC5D,YAAMC,OAAO,GAAGT,QAAQ,CAACU,IAAT,CAAeD,OAAD,IAAa;AACzC,eAAOA,OAAO,CAACE,EAAR,KAAeH,SAAtB;AACD,OAFe,CAAhB;AAGA,YAAMI,IAAI,GAAIH,OAAO,IAAIA,OAAO,CAACG,IAApB,IAA6BJ,SAA1C;AACA,aAAO;AAAEG,QAAAA,EAAE,EAAEH,SAAN;AAAiBI,QAAAA;AAAjB,OAAP;AACD,KANkB,CAAnB;AAQA,WAAO,EAAE,GAAGL,YAAL;AAAmBL,MAAAA;AAAnB,KAAP;AACD,GAV8B,CAA/B;AAYA,QAAMW,KAAK,GAAG;AACZjB,IAAAA,aAAa,EAAES,sBADH;AAEZJ,IAAAA;AAFY,GAAd;AAKA,sBACE,QAAC,oBAAD,CAAsB,QAAtB;AAA+B,IAAA,KAAK,EAAEY,KAAtC;AAAA,cACGlB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;IApCeD,qB;UAC4BL,e,EAKrBC,W;;;KANPI,qB","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\n\nexport function ConversationsProvider({ children }) {\n  const [conversations, setConversations] = useLocalStorage(\n    \"conversations\",\n    []\n  );\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const { contacts } = useContacts();\n\n  function createConversation(recipients) {\n    setConversations((prevConversations) => {\n      return [...prevConversations, { recipients, messages: [] }];\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation) => {\n    const recipients = conversation.recipients.map((recipient) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === recipient;\n      });\n      const name = (contact && contact.name) || recipient;\n      return { id: recipient, name };\n    });\n\n    return { ...conversation, recipients };\n  });\n\n  const value = {\n    conversations: formattedConversations,\n    createConversation,\n  };\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}