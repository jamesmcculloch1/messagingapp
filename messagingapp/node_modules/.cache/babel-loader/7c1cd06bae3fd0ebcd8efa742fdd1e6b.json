{"ast":null,"code":"var _jsxFileName = \"/Users/nedmcculloch/Desktop/JSapps/messageapp/messagingapp/src/contexts/ConversationsProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useSocket } from \"./SocketProvider\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConversationsContext = /*#__PURE__*/React.createContext();\nexport function useConversations() {\n  _s();\n\n  return useContext(ConversationsContext);\n}\n\n_s(useConversations, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ConversationsProvider({\n  children,\n  id\n}) {\n  _s2();\n\n  const [conversations, setConversations] = useLocalStorage(\"conversations\", []);\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const {\n    contacts\n  } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations(prevConversations => {\n      return [...prevConversations, {\n        recipients,\n        messages: []\n      }];\n    });\n  }\n\n  function addMessageToConversation({\n    recipients,\n    text,\n    sender\n  }) {\n    setConversations(prevConversations => {\n      let madeChange = false;\n      const newMessage = {\n        sender,\n        text\n      };\n      const newConversations = prevConversations.map(conversation => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return { ...conversation,\n            messages: [...conversation.messages, newMessage]\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, {\n          recipients,\n          messages: [newMessage]\n        }];\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n    socket.on(\"receive-message\");\n  });\n\n  function sendMessage(recipients, text) {\n    socket.emit(\"send-message\", {\n      recipients,\n      text\n    });\n    addMessageToConversation({\n      recipients,\n      text,\n      sender: id\n    });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map(recipient => {\n      const contact = contacts.find(contact => {\n        return contact.id === recipient;\n      });\n      const name = contact && contact.name || recipient;\n      return {\n        id: recipient,\n        name\n      };\n    });\n    const messages = conversation.messages.map(message => {\n      const contact = contacts.find(contact => {\n        return contact.id === message.sender;\n      });\n      const name = contact && contact.name || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message,\n        senderName: name,\n        fromMe\n      };\n    });\n    const selected = index === selectedConversationIndex;\n    return { ...conversation,\n      messages,\n      recipients,\n      selected\n    };\n  });\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation\n  };\n  return /*#__PURE__*/_jsxDEV(ConversationsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ConversationsProvider, \"aBX28SC79RVQUZ06dPlgsfTCy90=\", false, function () {\n  return [useLocalStorage, useContacts, useSocket];\n});\n\n_c = ConversationsProvider;\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n  a.sort();\n  b.sort();\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"ConversationsProvider\");","map":{"version":3,"sources":["/Users/nedmcculloch/Desktop/JSapps/messageapp/messagingapp/src/contexts/ConversationsProvider.js"],"names":["React","useContext","useState","useEffect","useLocalStorage","useContacts","useSocket","ConversationsContext","createContext","useConversations","ConversationsProvider","children","id","conversations","setConversations","selectedConversationIndex","setSelectedConversationIndex","contacts","socket","createConversation","recipients","prevConversations","messages","addMessageToConversation","text","sender","madeChange","newMessage","newConversations","map","conversation","arrayEquality","on","sendMessage","emit","formattedConversations","index","recipient","contact","find","name","message","fromMe","senderName","selected","value","selectedConversation","selectConversationIndex","a","b","length","sort","every","element"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { useContacts } from \"./ContactsProvider\";\nimport { useSocket } from \"./SocketProvider\";\n\nconst ConversationsContext = React.createContext();\n\nexport function useConversations() {\n  return useContext(ConversationsContext);\n}\n\nexport function ConversationsProvider({ children, id }) {\n  const [conversations, setConversations] = useLocalStorage(\n    \"conversations\",\n    []\n  );\n  const [selectedConversationIndex, setSelectedConversationIndex] = useState(0);\n  const { contacts } = useContacts();\n  const socket = useSocket();\n\n  function createConversation(recipients) {\n    setConversations((prevConversations) => {\n      return [...prevConversations, { recipients, messages: [] }];\n    });\n  }\n\n  function addMessageToConversation({ recipients, text, sender }) {\n    setConversations((prevConversations) => {\n      let madeChange = false;\n      const newMessage = { sender, text };\n      const newConversations = prevConversations.map((conversation) => {\n        if (arrayEquality(conversation.recipients, recipients)) {\n          madeChange = true;\n          return {\n            ...conversation,\n            messages: [...conversation.messages, newMessage],\n          };\n        }\n\n        return conversation;\n      });\n\n      if (madeChange) {\n        return newConversations;\n      } else {\n        return [...prevConversations, { recipients, messages: [newMessage] }];\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (socket == null) return;\n\n    socket.on(\"receive-message\")\n  });\n\n  function sendMessage(recipients, text) {\n    socket.emit(\"send-message\", { recipients, text });\n    addMessageToConversation({ recipients, text, sender: id });\n  }\n\n  const formattedConversations = conversations.map((conversation, index) => {\n    const recipients = conversation.recipients.map((recipient) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === recipient;\n      });\n      const name = (contact && contact.name) || recipient;\n      return { id: recipient, name };\n    });\n    const messages = conversation.messages.map((message) => {\n      const contact = contacts.find((contact) => {\n        return contact.id === message.sender;\n      });\n      const name = (contact && contact.name) || message.sender;\n      const fromMe = id === message.sender;\n      return { ...message, senderName: name, fromMe };\n    });\n\n    const selected = index === selectedConversationIndex;\n    return { ...conversation, messages, recipients, selected };\n  });\n\n  const value = {\n    conversations: formattedConversations,\n    selectedConversation: formattedConversations[selectedConversationIndex],\n    sendMessage,\n    selectConversationIndex: setSelectedConversationIndex,\n    createConversation,\n  };\n\n  return (\n    <ConversationsContext.Provider value={value}>\n      {children}\n    </ConversationsContext.Provider>\n  );\n}\n\nfunction arrayEquality(a, b) {\n  if (a.length !== b.length) return false;\n\n  a.sort();\n  b.sort();\n\n  return a.every((element, index) => {\n    return element === b[index];\n  });\n}\n"]},"metadata":{},"sourceType":"module"}